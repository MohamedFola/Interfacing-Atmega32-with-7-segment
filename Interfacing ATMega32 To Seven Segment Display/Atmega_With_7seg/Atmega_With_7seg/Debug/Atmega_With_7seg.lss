
Atmega_With_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000118  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000635  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  00000861  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026c  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003aa  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define SSD_CA_Direction DDRC
#define SSD_CA_PORT      PORTC


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	64 97       	sbiw	r28, 0x14	; 20
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	int counter = 0;    // to count to 9 as we can't display more than 9 on the seven segment
	
	uint8_t SSD_Common_Anode[10]    = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	uint8_t SSD_Common_Cathode[10]  = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	ea e6       	ldi	r30, 0x6A	; 106
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	de 01       	movw	r26, r28
  b0:	1b 96       	adiw	r26, 0x0b	; 11
  b2:	01 90       	ld	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	8a 95       	dec	r24
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x30>
		
	// set the direction of port C & D as output which are connected to the two seven segment displays
	SSD_CC_Direction = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	81 bb       	out	0x11, r24	; 17
	SSD_CA_Direction = 0xFF;
  be:	84 bb       	out	0x14, r24	; 20
	
	// set the pin of the bush button as input and make it pull up
	DDRA  &= ~(1<<Bush_Button_Pin);
  c0:	8a b3       	in	r24, 0x1a	; 26
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	8a bb       	out	0x1a, r24	; 26
	PORTA |=  (1<<Bush_Button_Pin);
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8b bb       	out	0x1b, r24	; 27
#define SSD_CA_PORT      PORTC


int main(void)
{
	int counter = 0;    // to count to 9 as we can't display more than 9 on the seven segment
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
	DDRA  &= ~(1<<Bush_Button_Pin);
	PORTA |=  (1<<Bush_Button_Pin);
    
    while (1) 
    {
		if (!Btn_Pressed) 
  d0:	c8 99       	sbic	0x19, 0	; 25
  d2:	06 c0       	rjmp	.+12     	; 0xe0 <main+0x5e>
			if((++counter) > 9) counter = 0;
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	91 05       	cpc	r25, r1
  da:	14 f0       	brlt	.+4      	; 0xe0 <main+0x5e>
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	31 ee       	ldi	r19, 0xE1	; 225
  e4:	44 e0       	ldi	r20, 0x04	; 4
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	40 40       	sbci	r20, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x64>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x6e>
  f0:	00 00       	nop
		_delay_ms(200);
		SSD_CC_PORT = SSD_Common_Cathode[counter];
  f2:	eb e0       	ldi	r30, 0x0B	; 11
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ec 0f       	add	r30, r28
  f8:	fd 1f       	adc	r31, r29
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	20 81       	ld	r18, Z
 100:	22 bb       	out	0x12, r18	; 18
		SSD_CA_PORT = SSD_Common_Anode[counter];
 102:	e1 e0       	ldi	r30, 0x01	; 1
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	ec 0f       	add	r30, r28
 108:	fd 1f       	adc	r31, r29
 10a:	e8 0f       	add	r30, r24
 10c:	f9 1f       	adc	r31, r25
 10e:	20 81       	ld	r18, Z
 110:	25 bb       	out	0x15, r18	; 21
    }
 112:	de cf       	rjmp	.-68     	; 0xd0 <main+0x4e>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
